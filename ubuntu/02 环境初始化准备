一、集群规划
harbor：		192.168.10.50
master01：		192.168.10.51
master02：		192.168.10.52
master03：		192.168.10.53
node01：		192.168.10.54
node02：		192.168.10.55
node03：		192.168.10.56
node04：		192.168.10.57
node05：		192.168.10.58
node06：		192.168.10.59

备注：9台主机，3个Master节点，6个Node节点，Node节个数自由设置，至少大于2个，Harbor另行参照文档搭建


二、设置主机名 / 域名解析 / 免密登录

1、设置主机名

# vim /etc/hostname   # 编辑成相应的节点名称
master01

2、配置域名解析

# vim /etc/hosts
192.168.10.50   harbor01         # 镜像仓库主机名
192.168.10.50   harbor01.io     # 镜像仓库域名
192.168.10.51   master01
192.168.10.52   master02
192.168.10.53   master03
192.168.10.54   node01
192.168.10.55   node02
192.168.10.56   node03
192.168.10.57   node04
192.168.10.58   node05
192.168.10.59   node06

2、设置免密登录

  注意：这个仅在master01上设置
[root@master01 ~]# ssh-keygen -t rsa
## 多按空格键，生成私钥

## 配置到各节点的免密登录
[root@master01 ~]# ssh-copy-id root@master01
[root@master01 ~]# ssh-copy-id root@master02
[root@master01 ~]# ssh-copy-id root@master03
[root@master01 ~]# ssh-copy-id root@node01
[root@master01 ~]# ssh-copy-id root@node02
[root@master01 ~]# ssh-copy-id root@node03
[root@master01 ~]# ssh-copy-id root@node04
[root@master01 ~]# ssh-copy-id root@node05
[root@master01 ~]# ssh-copy-id root@node06


三、环境初始化

1、安装依赖包

# yum install -y epel-release
# apt install -y chrony conntrack ipvsadm ipset jq iptables curl sysstat libseccomp-dev wget socat git
kube-proxy使用ipvs模式，ipvsadm为ipvs的管理工具
etcd集群各机器需要时间同步，chrony用于系统时间同步

2、更新 PATH 变量

# echo 'PATH=/opt/k8s/bin:$PATH' >>/root/.bashrc
# source /root/.bashrc
/opt/k8s/bin/ 目录保存本文档下载安装的程序


四、关闭防火墙，SWAP分区及SELinux

## 关闭防火墙，清理防火墙规则，设置默认转发策略：
# systemctl stop firewalld
# systemctl disable firewalld
# iptables -F && iptables -X && iptables -F -t nat && iptables -X -t nat
# iptables -P FORWARD ACCEPT

## 关闭swap分区，否则kubelet会启动失败
## 也可以设置kubelet启动参数 --fail-swap-on为false关闭swap检查
# swapoff -a
# sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

## 关闭 SELinux，否则 kubelet 挂载目录时可能报错Permission denied
# setenforce 0
# sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config

五、优化内核参数

# cat > sysctl.conf <<EOF
net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1
net.ipv4.ip_forward=1
net.ipv4.tcp_tw_recycle=0
vm.swappiness=0
vm.overcommit_memory=1
vm.panic_on_oom=0
fs.inotify.max_user_instances=8192
fs.inotify.max_user_watches=1048576
fs.file-max=52706963
fs.nr_open=52706963
net.ipv6.conf.all.disable_ipv6=1
net.netfilter.nf_conntrack_max=2310720
EOF

# cp sysctl.conf  /etc/sysctl.d/sysctl.conf
# sysctl -p /etc/sysctl.d/sysctl.conf
关闭tcp_tw_recycle，否则与NAT冲突，可能导致服务不通

 设置开机加载配置文件
cat >>/etc/modules-load.d/kubernetes.conf<<EOF
ip_vs_dh
ip_vs_ftp
ip_vs
ip_vs_lblc
ip_vs_lblcr
ip_vs_lc
ip_vs_nq
ip_vs_pe_sip
ip_vs_rr
ip_vs_sed
ip_vs_sh
ip_vs_wlc
ip_vs_wrr
nf_conntrack_ipv4
overlay
br_netfilter
EOF

 设置开机加载IPVS模块
systemctl enable systemd-modules-load.service   # 设置开机加载内核模块
lsmod | grep -e ip_vs -e nf_conntrack_ipv4      # 重启后检查ipvs模块是否加载

六、初始化配置

## 设置系统时区
# timedatectl set-timezone Asia/Shanghai

## 设置系统时钟同步
# systemctl enable chronyd
# systemctl start chronyd

## 关闭无关的服务
# systemctl stop postfix && systemctl disable postfix

## 创建相关目录
# mkdir -p /opt/k8s/{bin,work} /etc/{kubernetes,etcd}/cert


七、升级内核

  CentOS 7.x 系统自带的3.10.x内核存在Bugs，导致运行的Docker、Kubernetes不稳定
  解决方案是升级内核到4.4.X以上
# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
## 安装完成后检查 /boot/grub2/grub.cfg 中对应内核 menuentry 中是否包含 initrd16 配置，如果没有，再安装一次
# yum --enablerepo=elrepo-kernel install -y kernel-lt
## 设置开机从新内核启动
# grub2-set-default 0
## 重启机器：
# sync
# reboot
如果要升级内核或其它的主机层面的设置，最好先基于一个主机的OS做完，然后克隆生成VM
